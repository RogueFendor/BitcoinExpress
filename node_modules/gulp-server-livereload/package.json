{
  "name": "gulp-server-livereload",
  "version": "1.8.2",
  "description": "Gulp plugin to run a local webserver with livereload enabled via socket.io",
  "main": "src/index.js",
  "scripts": {
    "test": "node_modules/.bin/mocha",
    "prepublish": "npm run test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hiddentao/gulp-server-livereload.git"
  },
  "keywords": [
    "gulpplugin",
    "webserver",
    "connect",
    "livereload",
    "socket",
    "websocket"
  ],
  "bin": {
    "livereload": "./bin/livereload.js"
  },
  "author": {
    "name": "Ramesh Nair",
    "email": "ram@hiddentao.com",
    "url": "http://hiddentao.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/hiddentao/gulp-server-livereload/issues"
  },
  "homepage": "https://github.com/hiddentao/gulp-server-livereload",
  "devDependencies": {
    "bluebird": "^3.1.1",
    "mocha": "~1.20.1",
    "supertest": "~0.13.0"
  },
  "dependencies": {
    "lodash": "^4.0.0",
    "commander": "^2.8.1",
    "connect": "~3.1.1",
    "connect-inject": "~0.3.2",
    "gulp-util": "~2.2.19",
    "node-watch": "^0.3.4",
    "node.extend": "~1.0.10",
    "open": "~0.0.5",
    "proxy-middleware": "~0.15.0",
    "serve-index": "~1.1.4",
    "serve-static": "~1.5.2",
    "socket.io": "^1.4.4",
    "through2": "~0.5.1",
    "vinyl-fs": "^1.0.0"
  },
  "readme": "gulp-server-livereload [![Build Status](http://img.shields.io/travis/hiddentao/gulp-server-livereload.svg?style=flat)](https://travis-ci.org/hiddentao/gulp-server-livereload)\n==============\n\n> Gulp plugin to run a local webserver with live reload using socket.io\n\nServe a folder over HTTP and watch it for changes, telling the browser to\nreload itself when a change happens.\n\n* Uses [socket.io](http://socket.io) - livereload mechanism works even\nif your browser does not support WebSockets (PhoneGap developers rejoice!).\n\n* `window.console` capture - it can capture `console` output from the\nclient-side and transmit it to the back-end for display. This is useful for\nwhen testing from Phonegap, etc.\n\n* Supports [CSS injection](#livereload-behaviour) (no need to reload the whole page if just your CSS\nhas changed).\n\n* Proxy mode - proxy requests arriving at certain URLs to other servers.\n\n* Comes with a command-line runnable.\n\n\n_This was originally a fork of [gulp-webserver](https://github.com/schickling/gulp-webserver)._\n\n\n## Installation\n\n```sh\n$ npm install --save-dev gulp-server-livereload\n```\n\n## Usage\n\nThe folder supplied to `gulp.src()` will be the root folder from which files will be served.\n\n```js\nvar gulp = require('gulp');\nvar server = require('gulp-server-livereload');\n\ngulp.task('webserver', function() {\n  gulp.src('app')\n    .pipe(server({\n      livereload: true,\n      directoryListing: true,\n      open: true\n    }));\n});\n```\n\nIf you run `gulp webserver` your browser should automatically open up to `http://localhost:8000` and show a directory listing of the `app` folder.\n\n### Command-line\n\nInstall the package globally:\n\n```bash\n$ npm install -g gulp-server-livereload\n```\n\nThen you can run the `livereload` command to serve files out of the current folder.\nHere are the available options:\n\n```bash\n$ livereload help\n\n  Usage: livereload [options]\n\n  Options:\n\n    -h, --help        output usage information\n    -V, --version     output the version number\n    -n, --no-browser  do not open the localhost server in a browser\n    -l, --log [type]  log level (default: info)\n    -p, --port <n>    the port to run on\n```\n\n\n## Options\n\n_Note: not all of these options are currently available via the CLI executable_\n\nKey | Type | Default | Description |\n--- | --- | --- | --- |\n`host` | String | `localhost` | hostname of the webserver\n`port` | Number | `8000` | port of the webserver\n`livereload` | Boolean/Object | `false` | whether to use livereload. For advanced options, provide an object.\n`livereload.port` | Number | `35729` | port for livereload server to listen on.\n`livereload.markupHost` | String | `null` | the hostname to use for the livereload server in the injected SCRIPT tag. Default is to calculate it dynamically in the browser.\n`livereload.filter` | Function | - | function to filter out files to watch (default filters out `node_modules`).\n`livereload.clientConsole` | Boolean | `false` | whether to capture `window.console` output from the client and send it to the back-end for display.\n`directoryListing` | Boolean/Object | `false` | whether to display a directory listing. For advanced options, provide an object. You can use the `path property to set a custom path or the `options` property to set custom [serve-index](https://github.com/expressjs/serve-index) options.\n`defaultFile` | String | `index.html` | default file to show when root URL is requested. If `directoryListing` is enabled then this gets disabled.\n`fallback` | String | `undefined` | file to fall back to (relative to webserver root) when requested resource not found. Useful when building single-page apps with non-has URLs.\n`open` | Boolean/Object | `false` | open the localhost server in the browser\n`https` | Boolean/Object | `false` | whether to use https or not. By default, `gulp-server-livereload` provides you with a development certificate but you remain free to specify a path for your key and certificate by providing an object like this one: `{key: 'path/to/key.pem', cert: 'path/to/cert.pem'}`.\n`log` | String | `info` | If set to `debug` you will see all requests logged to the console.\n`proxies` | Array | `[]`| a list of proxy objects.  Each proxy object can be specified by `{source: '/abc', target: 'http://localhost:8080/abc', options: {headers: {'ABC_HEADER': 'abc'}}}`.\n\n\n## Livereload behaviour\n\nBy default when a file changes the livereload script in the browser does the\nfollowing:\n\n1. Checks to see whether the changed file is a CSS file\n2. If it is a CSS file then it reloads the changed CSS files in the browser\n3. Otherwise it reloads the whole page\n\nTo override the default behaviour define the following method in Javascript:\n\n```js\n/**\n * This method gets called by the livereload script when the server notifies it\n * that something has changed.\n *\n * @param  {Object} file File which changed.\n */\nwindow._onLiveReloadFileChanged = function(file) {\n  // do whatever you want here, e.g. location.reload();\n}\n```\n\nThe `file` parameter has the following structure:\n\n```js\n{\n  \"path\": ...full path to file which changed...\n  \"name\": ...file name (without path)...\n  \"ext\": ...file extension name...\n}\n```\n\n## FAQ\n\n#### Why can't I reach the server from the network?\n\nSet `0.0.0.0` as the `host` option.\n\n#### How can I set main.html to automatically load when I visit the URL?\n\nSet the `defaultFile` to `main.html`:\n\n```js\ngulp.task('webserver', function() {\n  gulp.src('app')\n    .pipe(server({\n      defaultFile: 'main.html'\n    }));\n});\n```\n\n#### How can I use livereload if my HTML is already being served up by a node.js/other app?\n\nYou'll have to add some Javascript to dynamically load in the browser-side scripts.\nFor example, if the `gulp-server-livereload` livereload port is set to 34322 then you would add:\n\n```js\n(function() {\n  var lrHost = location.protocol + '//' + location.hostname + ':34322';\n  var s = document.createElement('script');\n  s.async = true;\n  s.setAttribute('src', lrHost + '/livereload.js');\n  document.body.appendChild(s);\n})();\n```\n\nTo enable console logging capture add the following query paramter:\n\n```js\ns.setAttribute('src', lrHost + '/livereload.js?extra=capture-console');\n```\n\n\n#### How can I pass a custom filter to livereload?\n\nIn the `livereload` object, set the `enable` to `true` and provide filter function in `filter`:\n\n```js\ngulp.task('webserver', function() {\n  gulp.src('app')\n    .pipe(server({\n      livereload: {\n        enable: true,\n        filter: function(filePath, cb) {\n          cb( !(/node_modules/.test(filePath)) );\n        }\n      }\n    }));\n});\n```\n\n#### How can I use non-hash URLs for my single page app (i.e. HTML5 mode) with this plugin?\n\nWhen you're building a single-page app with non-hash URLs (html5 mode) then you \nwant the server to always serve up the same file for every URL. This is where \nthe `fallback` option comes into play:\n\n```js\ngulp.task('webserver', function() {\n  gulp.src('app')\n    .pipe(server({\n      fallback: 'index.html'\n    }));\n});\n```\n\n### How can I use this with CSS preprocessors such as LESS or SASS?\n\nIf you use a CSS preprocessor in gulp, you'll need to run its gulp task (typically with `gulp-watch`) together with the server, so that  LESS/SASS files are compiled as you save.\n\nYou'll also want to configure livereload to ignore changes to the source files, and instead let it only handle changes to the compiled CSS (which will be refreshed inline).\n\n```js\nvar watch = require('gulp-watch');\n\ngulp.task('watch', function () {\n  watch('./styles/*.less', batch(function (events, done) {\n    gulp.start('default', done);\n  }));\n});\n\ngulp.task('webserver', ['watch'], function () {\n  gulp.src('.')\n    .pipe(server({\n      livereload: {\n        enable: true,\n        filter: function (filename, cb) {\n          cb(!/\\.(sa|le)ss$|node_modules/.test(filename);\n        }\n      },\n      directoryListing: true,\n      open: true\n    }));\n});\n```\n\n_Note: the livereload server automatically handles generated sourcemap files properly so don't worry about them_.\n\n## License\n\nMIT - see LICENSE.md\n",
  "readmeFilename": "README.md",
  "_id": "gulp-server-livereload@1.8.2",
  "dist": {
    "shasum": "e4fd2eabf46f6ba297e9e59d6783b20c81eb7953"
  },
  "_from": "gulp-server-livereload@",
  "_resolved": "https://registry.npmjs.org/gulp-server-livereload/-/gulp-server-livereload-1.8.2.tgz"
}
